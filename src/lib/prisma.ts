import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcrypt';

// Configura√ß√£o adicional para logs e debug
const prismaClientSingleton = () => {
  return new PrismaClient({
    log: ['query', 'error', 'warn'],
    errorFormat: 'pretty',
  })
}

// Tipo para o global no Node.js
declare global {
  var prisma: undefined | ReturnType<typeof prismaClientSingleton>
}

// Usar um cliente global em desenvolvimento para evitar muitas conex√µes 
// durante hot-reloading, ou criar um novo para produ√ß√£o
export const prisma = globalThis.prisma ?? prismaClientSingleton()

if (process.env.NODE_ENV !== 'production') {
  globalThis.prisma = prisma
}

// Fun√ß√£o para verificar a conex√£o com o MongoDB
export async function testConnection() {
  try {
    await prisma.$connect()
    console.log('‚úÖ Conex√£o com MongoDB estabelecida com sucesso!')
    return true
  } catch (error) {
    console.error('‚ùå Erro ao conectar ao MongoDB:', error)
    return false
  } finally {
    await prisma.$disconnect()
  }
}

// Fun√ß√µes utilit√°rias para opera√ß√µes padronizadas
export const dbHelpers = {
  // Fun√ß√£o para criar um usu√°rio com timestamps autom√°ticos
  async createUser(userData: any) {
    try {
      // Garantir que a conex√£o est√° estabelecida
      await prisma.$connect();
      console.log('‚úÖ Conex√£o estabelecida para criar usu√°rio');
      
      // Remover campos inv√°lidos que possam causar problemas
      const { id, _id, ...cleanedData } = userData;
      
      // Adicionar timestamps
      const dataWithTimestamps = {
        ...cleanedData,
        createdAt: new Date(),
        updatedAt: new Date()
      };
      
      console.log('üîß Preparando dados para cria√ß√£o:', 
        JSON.stringify({
          ...dataWithTimestamps,
          password: '[REDACTED]'
        }, null, 2)
      );
      
      // Criar o usu√°rio
      const user = await prisma.user.create({
        data: dataWithTimestamps
      });
      
      console.log(`‚úÖ Usu√°rio criado com sucesso. ID gerado: ${user.id}`);
      
      // Verificar se o usu√°rio foi realmente criado
      const verifiedUser = await prisma.user.findUnique({
        where: { id: user.id }
      });
      
      if (!verifiedUser) {
        throw new Error('Falha na verifica√ß√£o: usu√°rio n√£o encontrado ap√≥s cria√ß√£o');
      }
      
      console.log(`‚úÖ Verifica√ß√£o conclu√≠da: usu√°rio ${verifiedUser.email} existe no banco de dados`);
      
      return { success: true, user };
    } catch (error) {
      console.error('‚ùå Erro ao criar usu√°rio:', error);
      return { success: false, error };
    } finally {
      // Garantir que a conex√£o seja fechada
      try {
        await prisma.$disconnect();
        console.log('üîí Conex√£o com MongoDB fechada ap√≥s cria√ß√£o de usu√°rio');
      } catch (disconnectError) {
        console.error('‚ö†Ô∏è Erro ao desconectar do MongoDB:', disconnectError);
      }
    }
  },
  
  // Fun√ß√£o para atualizar o timestamp de √∫ltimo login
  async updateLastLogin(userId: string) {
    try {
      await prisma.$connect();
      const user = await prisma.user.update({
        where: { id: userId },
        data: { 
          lastLogin: new Date(),
          updatedAt: new Date()
        }
      });
      return { success: true, user };
    } catch (error) {
      console.error('‚ùå Erro ao atualizar √∫ltimo login:', error);
      return { success: false, error };
    } finally {
      await prisma.$disconnect();
    }
  },
  
  // Fun√ß√£o para buscar usu√°rios com filtros
  async getUsers(filters: any = {}) {
    try {
      await prisma.$connect();
      
      const users = await prisma.user.findMany({
        where: filters,
        select: {
          id: true,
          name: true,
          email: true,
          role: true,
          teamId: true,
          managerId: true,
          lastLogin: true,
          createdAt: true,
          updatedAt: true,
        },
      });
      
      return { success: true, users };
    } catch (error) {
      console.error('‚ùå Erro ao buscar usu√°rios:', error);
      return { success: false, error };
    } finally {
      await prisma.$disconnect();
    }
  },
  
  // Fun√ß√£o para excluir um usu√°rio
  async deleteUser(userId: string) {
    try {
      await prisma.$connect();
      
      // Verificar se o usu√°rio existe
      const user = await prisma.user.findUnique({
        where: { id: userId }
      });
      
      if (!user) {
        return { success: false, error: { message: 'Usu√°rio n√£o encontrado' } };
      }
      
      // Excluir o usu√°rio
      await prisma.user.delete({
        where: { id: userId }
      });
      
      return { success: true };
    } catch (error) {
      console.error('‚ùå Erro ao excluir usu√°rio:', error);
      return { success: false, error };
    } finally {
      await prisma.$disconnect();
    }
  },
  
  // Fun√ß√£o para atualizar um usu√°rio
  async updateUser(userId: string, userData: any) {
    try {
      await prisma.$connect();
      
      // Verificar se o usu√°rio existe
      const existingUser = await prisma.user.findUnique({
        where: { id: userId }
      });
      
      if (!existingUser) {
        return { success: false, error: { message: 'Usu√°rio n√£o encontrado' } };
      }
      
      // Se a senha estiver sendo atualizada, criptograf√°-la
      if (userData.password) {
        userData.password = await bcrypt.hash(userData.password, 10);
      }
      
      // Atualizar o usu√°rio sempre com o timestamp atualizado
      const data = {
        ...userData,
        updatedAt: new Date()
      };
      
      const updatedUser = await prisma.user.update({
        where: { id: userId },
        data
      });
      
      // Remover a senha antes de retornar
      const { password, ...userWithoutPassword } = updatedUser;
      
      return { success: true, user: userWithoutPassword };
    } catch (error) {
      console.error('‚ùå Erro ao atualizar usu√°rio:', error);
      return { success: false, error };
    } finally {
      await prisma.$disconnect();
    }
  }
}; 