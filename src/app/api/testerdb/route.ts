import { NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { logTest, LogEntities } from '@/lib/logger';

export async function GET(request: Request) {
  console.log('üß™ Iniciando teste de conectividade com o MongoDB...');
  
  const diagnostics = {
    connectionTest: false,
    writeTest: false,
    readTest: false,
    deleteTest: false,
    userCount: 0,
    error: null,
    message: '',
    timestamp: new Date().toISOString()
  };
  
  try {
    // Desconectar qualquer conex√£o pr√©via
    await prisma.$disconnect();
    console.log('üîå Desconectado de conex√µes anteriores');
    
    // Tentar estabelecer uma nova conex√£o
    await prisma.$connect();
    console.log('‚úÖ Conex√£o com o MongoDB estabelecida com sucesso');
    diagnostics.connectionTest = true;
    
    try {
      // Contar usu√°rios existentes para diagn√≥stico
      const userCount = await prisma.user.count();
      console.log(`üìä Contagem atual de usu√°rios: ${userCount}`);
      diagnostics.userCount = userCount;
      
      // Testar cria√ß√£o de um registro tempor√°rio
      const testData = {
        name: `Teste Diagn√≥stico ${Date.now()}`,
        email: `teste.${Date.now()}@diagnostico.test`,
        password: 'senha-teste-123',
        role: 'TESTE',
      };
      
      console.log('üîÑ Criando usu√°rio de teste...');
      const createdUser = await prisma.user.create({
        data: {
          ...testData,
          createdAt: new Date(),
          updatedAt: new Date()
        }
      });
      
      console.log(`‚úÖ Usu√°rio de teste criado com sucesso. ID: ${createdUser.id}`);
      diagnostics.writeTest = true;
      
      // Tentar ler o usu√°rio criado
      console.log('üîç Verificando se o usu√°rio foi salvo...');
      const foundUser = await prisma.user.findUnique({
        where: { id: createdUser.id }
      });
      
      if (foundUser) {
        console.log('‚úÖ Usu√°rio encontrado ap√≥s cria√ß√£o');
        diagnostics.readTest = true;
      } else {
        console.error('‚ùå FALHA: Usu√°rio n√£o foi encontrado ap√≥s cria√ß√£o');
      }
      
      // Excluir o usu√°rio de teste
      console.log('üóëÔ∏è Removendo usu√°rio de teste...');
      await prisma.user.delete({
        where: { id: createdUser.id }
      });
      
      console.log('‚úÖ Usu√°rio de teste removido com sucesso');
      diagnostics.deleteTest = true;
      
      // Nova contagem ap√≥s o teste
      const finalCount = await prisma.user.count();
      console.log(`üìä Contagem final de usu√°rios: ${finalCount}`);
      
      // Verificar se a contagem permaneceu a mesma
      if (finalCount === userCount) {
        console.log('‚úÖ Contagem de usu√°rios consistente ap√≥s teste completo');
      } else {
        console.warn(`‚ö†Ô∏è Contagem de usu√°rios inconsistente. Antes: ${userCount}, Depois: ${finalCount}`);
      }
      
      // Montar mensagem de diagn√≥stico
      diagnostics.message = 'Teste de conex√£o com MongoDB conclu√≠do com sucesso';
      
      // Registrar o sucesso nos logs
      await logTest(
        LogEntities.DATABASE,
        true,
        {
          userCount,
          finalCount,
          diagnostics,
          request: {
            url: request.url,
            method: request.method,
            headers: {
              userAgent: request.headers.get('user-agent'),
              host: request.headers.get('host')
            }
          }
        }
      );
    } catch (operationError) {
      console.error('‚ùå Erro durante opera√ß√µes de teste:', operationError);
      diagnostics.error = {
        message: operationError.message,
        code: operationError.code || 'UNKNOWN'
      };
      diagnostics.message = `Erro durante opera√ß√µes no banco de dados: ${operationError.message}`;
      
      // Registrar o erro nos logs
      await logTest(
        LogEntities.DATABASE,
        false,
        {
          errorType: 'OPERATION_ERROR',
          errorDetails: {
            message: operationError.message,
            code: operationError.code,
            stack: operationError.stack
          },
          diagnostics
        }
      );
    }
  } catch (connectionError) {
    console.error('‚ùå Erro ao conectar com MongoDB:', connectionError);
    diagnostics.error = {
      message: connectionError.message,
      code: connectionError.code || 'CONNECTION_FAILED'
    };
    diagnostics.message = `Falha na conex√£o com MongoDB: ${connectionError.message}`;
    
    // Tentamos registrar o erro em console apenas
    console.error('N√£o foi poss√≠vel registrar no log devido a erro de conex√£o:', {
      errorType: 'CONNECTION_ERROR',
      errorDetails: {
        message: connectionError.message,
        code: connectionError.code,
        stack: connectionError.stack
      }
    });
  } finally {
    // Garantir que a conex√£o seja fechada
    try {
      await prisma.$disconnect();
      console.log('üîí Conex√£o com MongoDB fechada');
    } catch (disconnectError) {
      console.warn('‚ö†Ô∏è Erro ao fechar conex√£o:', disconnectError);
    }
  }
  
  // Retornar resultado do diagn√≥stico
  return NextResponse.json({
    success: diagnostics.connectionTest && diagnostics.writeTest && diagnostics.readTest && diagnostics.deleteTest,
    diagnostics,
    mongoUrl: process.env.DATABASE_URL?.substring(0, 25) + '...' // Mostrar in√≠cio da URL por seguran√ßa
  });
} 